{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","filingStatus","setFilingStatus","rebate","setRebate","agi","setAgi","children","setChildren","calculateRebate","agiFloat","parseFloat","childRebate","className","Container","Card","Header","Body","onSubmit","e","preventDefault","Title","Text","map","type","key","Form","Check","name","value","id","label","onChange","Group","as","Row","controlId","Label","column","sm","Col","Control","placeholder","target","disabled","Button","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4893eadb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Card, Col, Container, Form, Row } from 'react-bootstrap';\n\nconst App = () => {\n  const [filingStatus, setFilingStatus] = useState('Single');\n  const [rebate, setRebate] = useState(0);\n  const [agi, setAgi] = useState(0);\n  const [children, setChildren] = useState(0);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    calculateRebate();\n  };\n\n  const handleReset = e => {\n    e.preventDefault();\n    setFilingStatus('');\n    setRebate(0);\n    setAgi(0);\n    setChildren(0);\n  };\n\n  const calculateRebate = () => {\n    let agiFloat = parseFloat(agi);\n    let childRebate = children * 500;\n    if (filingStatus === 'Single') {\n      if (agiFloat <= 75000) {\n        setRebate(1200 + childRebate);\n      } else if (agiFloat > 75000 && agiFloat < 99000) {\n        const diff = agiFloat - 75000;\n        const multiplier = diff / 100;\n        const reduction = multiplier * 5;\n        setRebate(1200 - reduction + childRebate);\n      } else {\n        setRebate(0 + childRebate);\n      }\n    } else if (filingStatus === 'Head of Household') {\n      if (agiFloat <= 112500) {\n        setRebate(1200 + childRebate);\n      } else if (agiFloat > 112500 && agiFloat < 136900) {\n        const diff = agiFloat - 112500;\n        const multiplier = diff / 100;\n        const reduction = multiplier * 5;\n        setRebate(1200 - reduction + childRebate);\n      } else {\n        setRebate(0 + childRebate);\n      }\n    } else if (filingStatus === 'Married') {\n      if (agiFloat <= 150000) {\n        setRebate(2400 + childRebate);\n      } else if (agiFloat > 150000 && agiFloat < 198000) {\n        const diff = agiFloat - 150000;\n        const multiplier = diff / 100;\n        const reduction = multiplier * 5;\n        setRebate(2400 - reduction + childRebate);\n      } else {\n        setRebate(0 + childRebate);\n      }\n    }\n  };\n\n  return (\n    <div className=\"mt-4\">\n      <Container>\n        <Card>\n          <Card.Header>Covid-19 Stimulus Calculator</Card.Header>\n          <Card.Body>\n            <form onSubmit={handleSubmit}>\n              <Card.Title>Filing Status</Card.Title>\n              <Card.Text>\n                {['Single', 'Head of Household', 'Married'].map(type => (\n                  <div key={`default-${type}`} className=\"mb-3\">\n                    <Form.Check\n                      name=\"filingStatus\"\n                      type=\"radio\"\n                      value={filingStatus}\n                      id={type}\n                      label={type}\n                      onChange={() => setFilingStatus(type)}\n                    />\n                  </div>\n                ))}\n              </Card.Text>\n              <Card.Title>Number of Children (16 & under only)</Card.Title>\n              <Card.Text>\n                <Form.Group as={Row} controlId=\"NumberOfChildren\">\n                  <Form.Label column sm={3}>\n                    Number of Children\n                  </Form.Label>\n                  <Col sm={9}>\n                    <Form.Control\n                      value={children}\n                      type=\"tel\"\n                      placeholder=\"Enter as number with no special characeters, ex: if you have 2 children enter 2\"\n                      onChange={e => setChildren(e.target.value)}\n                    />\n                  </Col>\n                </Form.Group>\n              </Card.Text>\n              <Card.Title>Adjust Gross Income</Card.Title>\n              <Card.Text>\n                <Form.Group as={Row} controlId=\"AdjustedGrossIncome\">\n                  <Form.Label column sm={3}>\n                    Adjusted Gross Income\n                  </Form.Label>\n                  <Col sm={9}>\n                    <Form.Control\n                      value={agi}\n                      type=\"tel\"\n                      placeholder=\"Enter as number with no special characeters, ex: if your income is $40,000 enter 40000\"\n                      onChange={e => setAgi(e.target.value)}\n                    />\n                  </Col>\n                </Form.Group>\n              </Card.Text>\n              <Card.Title>Estimated Rebate</Card.Title>\n              <Card.Text>\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                  <Form.Label column sm={3}>\n                    Estimated Rebate\n                  </Form.Label>\n                  <Col sm={9}>\n                    <Form.Control type=\"email\" disabled value={rebate} />\n                  </Col>\n                </Form.Group>\n              </Card.Text>\n              <Form.Group as={Row} controlId=\"Buttons\">\n                <Col sm={1}>\n                  <Button variant=\"primary\" type=\"submit\">\n                    Calculate\n                  </Button>\n                </Col>\n                <Col sm={2}>\n                  <Button variant=\"primary\" type=\"submit\" onClick={handleReset}>\n                    Reset\n                  </Button>\n                </Col>\n              </Form.Group>\n            </form>\n          </Card.Body>\n        </Card>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}